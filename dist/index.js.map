{"version":3,"sources":["../src/index.js"],"names":["NativeDatabase","require","Database","NativeStatement","Statement","nextObjectID","constructor","_native","id","open","string","flags","vfs","callback","err","loadExtension","filePath","all","sql","rows","query","each","finished","columns","values","index","statement","next","push","database","close","lastInsertID","lastError","error","queryError","Error","prop","hasOwnProperty","createFunction","name","argc","encoding","func","step","final","o","result","createScalarFunction","createAggregateFunction","initialValue","aggregate","args","context","initialized","_database","_sql","replace","Cursor","getResults","returnMetadata","setImmediate","results"],"mappings":"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","sourcesContent":["const NativeDatabase = require('bindings')('minisqlite').Database;\nconst NativeStatement = require('bindings')('minisqlite').Statement;\n\nimport assert from 'assert';\nimport Cursor from './cursor';\n\nlet nextObjectID = 0;\n\nexport class Database {\n  constructor() {\n    this._native = new NativeDatabase();\n    this.id = ++nextObjectID;\n  }\n\n  open(string, flags, vfs, callback) {\n    this._native.open(string, flags, vfs, (err) => {\n      if (err) {\n        return callback(err, this);\n      }\n\n      return callback(null, this);\n    });\n  }\n\n  loadExtension(filePath, callback) {\n    this.all(`SELECT load_extension('${filePath}')`, callback);\n  }\n\n  all(sql, callback) {\n    const rows = [];\n\n    this.query(sql).each((err, {finished, columns, values, index, statement, next}) => {\n      if (err) {\n        callback(err, {});\n        return;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n\n      if (finished) {\n        callback(err, {rows, columns});\n        return;\n      }\n\n      next();\n    });\n  }\n\n  query(sql) {\n    const statement = new Statement({database: this});\n    return statement.query(sql);\n  }\n\n  close() {\n    return this._native.close();\n  }\n\n  get lastInsertID() {\n    return this._native.lastInsertID();\n  }\n\n  get lastError() {\n    const error = this._native.lastError();\n\n    if (error == null) {\n      return null;\n    }\n\n    const queryError = new Error();\n\n    for (const prop in error) {\n      if (error.hasOwnProperty(prop)) {\n        queryError[prop] = error[prop];\n      }\n    }\n\n    return queryError;\n  }\n\n  createFunction(name, argc, encoding, func, step, final) {\n    encoding = encoding || 1; // SQLITE_UTF8\n    argc = argc || -1;\n\n    if (func) {\n      step = null;\n      final = null;\n    } else if (typeof step === 'function') {\n      final = typeof final === 'function' ? final : (o) => o.result;\n      func = null;\n    }\n\n    return this._native.createFunction(name, argc, encoding, func, step, final);\n  }\n\n  createScalarFunction(name, func) {\n    return this.createFunction(name, -1, 1, func, null, null);\n  }\n\n  createAggregateFunction(name, initialValue, step, final) {\n    const aggregate = (args, context) => {\n      if (!context.initialized) {\n        context.initialized = true;\n        context.result = initialValue;\n      }\n\n      return step(args, context);\n    };\n\n    return this.createFunction(name, -1, 1, null, aggregate, final);\n  }\n}\n\nexport class Statement {\n  constructor({database}) {\n    this._native = new NativeStatement();\n    this._database = database;\n    this.id = ++nextObjectID;\n  }\n\n  query(sql) {\n    assert(this._database instanceof Database, 'invalid database argument');\n    assert(this._database._native, 'invalid database handle');\n\n    if (!this._native.finished()) {\n      throw new Error('client in use, last statement: ' + this._sql);\n    }\n\n    if (sql == null) {\n      sql = '';\n    }\n\n    sql = sql.replace(/\\0/g, '');\n\n    this._sql = sql;\n\n    this._native.query(this._database._native, sql);\n\n    return new Cursor(this);\n  }\n\n  getResults(returnMetadata, callback) {\n    Statement.setImmediate(() => {\n      const results = this._native.getResults(returnMetadata);\n\n      callback(results);\n    });\n  }\n\n  close() {\n    return this._native.close();\n  }\n}\n\nStatement.setImmediate = setImmediate;\n"],"file":"index.js"}