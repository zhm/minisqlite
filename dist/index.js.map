{"version":3,"sources":["../src/index.js"],"names":["createPool","NativeClient","require","Client","genericPool","nextClientID","constructor","nativeClient","id","connect","string","flags","vfs","callback","err","query","sql","finished","Error","_sql","getResults","returnMetadata","setImmediate","close","lastInsertID","lastError","error","queryError","prop","hasOwnProperty","createFunction","name","argc","encoding","func","step","final","o","result","createScalarFunction","createAggregateFunction","initialValue","aggregate","args","context","initialized","options","Pool","create","db","client","destroy","max","idleTimeoutMillis","reapIntervalMillis","log"],"mappings":"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","file":"index.js","sourcesContent":["const NativeClient = require('bindings')('addon').Client;\nconst genericPool = require('generic-pool');\n\nimport assert from 'assert';\nimport Cursor from './cursor';\n\nlet nextClientID = 0;\n\nexport class Client {\n  constructor() {\n    this.nativeClient = new NativeClient();\n    this.id = ++nextClientID;\n  }\n\n  connect(string, flags, vfs, callback) {\n    this.nativeClient.connect(string, flags, vfs, (err) => {\n      if (err) {\n        return callback(err, this);\n      }\n\n      return callback(null, this);\n    });\n  }\n\n  query(sql) {\n    if (!this.nativeClient.finished()) {\n      throw new Error('client in use, last statement: ' + this._sql);\n    }\n\n    this._sql = sql;\n\n    this.nativeClient.query(sql);\n\n    return new Cursor(this);\n  }\n\n  getResults(returnMetadata, callback) {\n    Client.setImmediate(() => {\n      callback(this.nativeClient.getResults(returnMetadata));\n    });\n  }\n\n  close() {\n    return this.nativeClient.close();\n  }\n\n  get lastInsertID() {\n    return this.nativeClient.lastInsertID();\n  }\n\n  get lastError() {\n    const error = this.nativeClient.lastError();\n\n    if (error == null) {\n      return null;\n    }\n\n    const queryError = new Error();\n\n    for (const prop in error) {\n      if (error.hasOwnProperty(prop)) {\n        queryError[prop] = error[prop];\n      }\n    }\n\n    return queryError;\n  }\n\n  createFunction(name, argc, encoding, func, step, final) {\n    encoding = encoding || 1; // SQLITE_UTF8\n    argc = argc || -1;\n\n    if (func) {\n      step = null;\n      final = null;\n    } else if (typeof step === 'function') {\n      final = typeof final === 'function' ? final : (o) => o.result;\n      func = null;\n    }\n\n    return this.nativeClient.createFunction(name, argc, encoding, func, step, final);\n  }\n\n  createScalarFunction(name, func) {\n    return this.createFunction(name, -1, 1, func, null, null);\n  }\n\n  createAggregateFunction(name, initialValue, step, final) {\n    const aggregate = (args, context) => {\n      if (!context.initialized) {\n        context.initialized = true;\n        context.result = initialValue;\n      }\n\n      return step(args, context);\n    };\n\n    return this.createFunction(name, -1, 1, null, aggregate, final);\n  }\n}\n\nClient.setImmediate = setImmediate;\n\nexport function createPool(options) {\n  /* eslint-disable new-cap */\n  return genericPool.Pool({\n    name: options.name || 'minisqlite',\n    create: (callback) => {\n      new Client().connect(options.db, null, null, (err, client) => {\n        if (err) {\n          return callback(client ? client.lastError : err);\n        }\n\n        return callback(null, client);\n      });\n    },\n    destroy: (client) => {\n      client.close();\n    },\n    max: options.max || 10,\n    idleTimeoutMillis: options.idleTimeoutMillis || 30000,\n    reapIntervalMillis: options.reapIntervalMillis || 1000,\n    log: options.log\n  });\n  /* eslint-enable new-cap */\n}\n"]}