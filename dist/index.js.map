{"version":3,"sources":["../src/index.js"],"names":["NativeDatabase","require","Database","NativeStatement","Statement","nextObjectID","dirs","linux","win32","darwin","spatialitePath","resolve","join","__dirname","process","platform","constructor","_native","id","open","string","flags","vfs","callback","err","loadSpatiaLite","all","sql","rows","query","each","finished","columns","values","index","statement","next","push","database","close","lastInsertID","lastError","error","queryError","Error","prop","hasOwnProperty","createFunction","name","argc","encoding","func","step","final","o","result","createScalarFunction","createAggregateFunction","initialValue","aggregate","args","context","initialized","_database","_sql","replace","getResults","returnMetadata","setImmediate","results"],"mappings":"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","file":"index.js","sourcesContent":["const NativeDatabase = require('bindings')('addon').Database;\nconst NativeStatement = require('bindings')('addon').Statement;\n\nimport path from 'path';\nimport assert from 'assert';\nimport Cursor from './cursor';\n\nlet nextObjectID = 0;\n\nconst dirs = {\n  linux: 'linux',\n  win32: 'win',\n  darwin: 'mac'\n};\n\nexport const spatialitePath = path.resolve(path.join(__dirname, '..', 'lib', dirs[process.platform] || 'linux', 'mod_spatialite'));\n\nexport class Database {\n  constructor() {\n    this._native = new NativeDatabase();\n    this.id = ++nextObjectID;\n  }\n\n  open(string, flags, vfs, callback) {\n    this._native.open(string, flags, vfs, (err) => {\n      if (err) {\n        return callback(err, this);\n      }\n\n      return callback(null, this);\n    });\n  }\n\n  loadSpatiaLite(callback) {\n    this.all(`SELECT load_extension('${spatialitePath}')`, callback);\n  }\n\n  all(sql, callback) {\n    const rows = [];\n\n    this.query(sql).each((err, {finished, columns, values, index, statement, next}) => {\n      if (err) {\n        callback(err, {});\n        return;\n      }\n\n      if (values) {\n        rows.push(values);\n      }\n\n      if (finished) {\n        callback(err, {rows, columns});\n        return;\n      }\n\n      next();\n    });\n  }\n\n  query(sql) {\n    const statement = new Statement({database: this});\n    return statement.query(sql);\n  }\n\n  close() {\n    return this._native.close();\n  }\n\n  get lastInsertID() {\n    return this._native.lastInsertID();\n  }\n\n  get lastError() {\n    const error = this._native.lastError();\n\n    if (error == null) {\n      return null;\n    }\n\n    const queryError = new Error();\n\n    for (const prop in error) {\n      if (error.hasOwnProperty(prop)) {\n        queryError[prop] = error[prop];\n      }\n    }\n\n    return queryError;\n  }\n\n  createFunction(name, argc, encoding, func, step, final) {\n    encoding = encoding || 1; // SQLITE_UTF8\n    argc = argc || -1;\n\n    if (func) {\n      step = null;\n      final = null;\n    } else if (typeof step === 'function') {\n      final = typeof final === 'function' ? final : (o) => o.result;\n      func = null;\n    }\n\n    return this._native.createFunction(name, argc, encoding, func, step, final);\n  }\n\n  createScalarFunction(name, func) {\n    return this.createFunction(name, -1, 1, func, null, null);\n  }\n\n  createAggregateFunction(name, initialValue, step, final) {\n    const aggregate = (args, context) => {\n      if (!context.initialized) {\n        context.initialized = true;\n        context.result = initialValue;\n      }\n\n      return step(args, context);\n    };\n\n    return this.createFunction(name, -1, 1, null, aggregate, final);\n  }\n}\n\nDatabase.spatialitePath = spatialitePath;\n\nexport class Statement {\n  constructor({database}) {\n    this._native = new NativeStatement();\n    this._database = database;\n    this.id = ++nextObjectID;\n  }\n\n  query(sql) {\n    assert(this._database instanceof Database, 'invalid database argument');\n    assert(this._database._native, 'invalid database handle');\n\n    if (!this._native.finished()) {\n      throw new Error('client in use, last statement: ' + this._sql);\n    }\n\n    if (sql == null) {\n      sql = '';\n    }\n\n    sql = sql.replace(/\\0/g, '');\n\n    this._sql = sql;\n\n    this._native.query(this._database._native, sql);\n\n    return new Cursor(this);\n  }\n\n  getResults(returnMetadata, callback) {\n    Statement.setImmediate(() => {\n      const results = this._native.getResults(returnMetadata);\n\n      callback(results);\n    });\n  }\n\n  close() {\n    return this._native.close();\n  }\n}\n\nStatement.setImmediate = setImmediate;\n"]}