{"version":3,"sources":["../src/cursor.js"],"names":["Cursor","constructor","client","batchOffset","batchStart","batch","index","columns","finished","needsMetadata","each","callback","next","err","row","eachBatch","nextBatch","error","length","processResult","values","process","nextTick","getResults","results","nativeClient","hasResult","hasColumns","emptyResultSet","endOfResultSet","lastError"],"mappings":"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","file":"cursor.js","sourcesContent":["export default class Cursor {\n  constructor(client) {\n    this.client = client;\n    this.batchOffset = 0;\n    this.batchStart = 0;\n    this.batch = [];\n    this.index = 0;\n    this.columns = null;\n    this.finished = false;\n    this.needsMetadata = true;\n  }\n\n  each(callback) {\n    this.next((err, finished, columns, row, index) => {\n      /* eslint-disable callback-return */\n      callback(err, finished, columns, row, index);\n      /* eslint-enable callback-return */\n\n      if (!finished) {\n        this.each(callback);\n      }\n    });\n  }\n\n  eachBatch(callback) {\n    this.nextBatch(() => {\n      /* eslint-disable callback-return */\n      callback(this.error,\n               this.finished,\n               this.columns,\n               this.batch,\n               this.index);\n      /* eslint-enable callback-return */\n\n      // console.log('IDX', this.index, this.index + this.batch.length);\n      this.index += this.batch.length;\n\n      if (!this.finished) {\n        this.eachBatch(callback);\n      }\n    });\n  }\n\n  next(callback) {\n    const processResult = () => {\n      let values = null;\n\n      const batchOffset = this.batchOffset;\n\n      if (this.batch.length) {\n        const row = this.batch[this.batchOffset];\n\n        this.batchOffset += 1;\n\n        values = row ? row.values : null;\n      }\n\n      /* eslint-disable callback-return */\n      callback(this.error,\n               this.finished && this.batchOffset === this.batch.length,\n               this.columns,\n               values,\n               this.batchStart + batchOffset);\n      /* eslint-enable callback-return */\n    };\n\n    if (this.batchOffset < this.batch.length) {\n      if (this.batchOffset % 1000 === 0) {\n        process.nextTick(processResult);\n      } else {\n        processResult();\n      }\n    } else {\n      // we need to fetch the next batch into memory\n      this.nextBatch(processResult);\n    }\n  }\n\n  nextBatch(callback) {\n    if (this.needsMetadata) {\n      this.index = 0;\n      this.columns = null;\n    }\n\n    this.client.getResults(this.needsMetadata, (results) => {\n      this.needsMetadata = false;\n      this.batch = results;\n      this.batchOffset = 0;\n      this.finished = this.client.nativeClient.finished();\n\n      const hasResult = results && results.length;\n\n      const hasColumns = hasResult && results[0] && results[0].columns;\n\n      // results == [ null ]\n      const emptyResultSet = hasResult &&\n                             results[results.length - 1] == null;\n\n      // results == [ ..., {} ]\n      const endOfResultSet = hasResult &&\n                             results[results.length - 1] &&\n                             results[results.length - 1].values == null;\n\n      if (hasColumns) {\n        this.batchStart = 0;\n        this.columns = results[0].columns;\n      }\n\n      // There are several possible states here because the client supports\n      // multiple result sets in a single query and the complexity that batching adds.\n      //\n      // finished?               -> we are done, don't do anything\n      // results === []          -> it's the signal of finished result set\n      // results === [ null ]    -> a query that had no result set all (no column def, just a command like CREATE TABLE)\n      // results === [ ..., {} ] -> the end of a result set has a {} at the end, note that this is NOT the end\n      //                            of the entire cursor stream because there might be more SELECT queries in the command\n      //                            text. If there are, this section below resets the index and the metadata flag so\n      //                            that the next call to getResults will request the column metadata of the next query.\n      //                            This is important when, for example, there are 2 completely different SELECT statements\n      //                            in the command text. In that case we need to ask for metadata twice.\n      if (!this.finished && (emptyResultSet || endOfResultSet)) {\n        this.needsMetadata = true;\n      }\n\n      const error = this.client.lastError;\n\n      if (error) {\n        this.error = error;\n      }\n\n      /* eslint-disable callback-return */\n      callback();\n      /* eslint-enable callback-return */\n\n      if (results) {\n        // console.log('INCR', results.length, results);\n        this.batchStart += results.length;\n      }\n\n      if (endOfResultSet) {\n        this.batchStart = 0;\n      }\n    });\n  }\n}\n"]}